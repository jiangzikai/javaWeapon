为什么要使用StringBuilder和StringBuffer？

String在java中是不可变长的,一旦初始化就不能修改长度,简单的字符串拼接其实是创建新的String对象,
再把拼接后的内容赋值给新的对象,在频繁修改的情况下会频繁创建对象,这个效率非常低。
而StringBuilder和StringBuffer则不会,从头到尾只有一个实例对象,那就是StringBuilder或StringBuffer


String源码中
private final char value[]; 是使用这个存储的，final是不能修改的。
StringBuilder源码中
char[] value;  使用这个存储，可以修改


总结：
String：字符串常量，值创建之后不可以改变。拼接的时候，创建新的对象，原来对象的引用被废弃，产生垃圾对象，占用内存。
StringBuilder：字符串缓存区，它的内容可以被修改，长度也可以改变。线程非安全的
StringBuffer：字符串缓存区，它的内容可以被修改，长度也可以改变。线程安全的


字符串缓冲区被多个线程使用时，JVM不能保证StringBuilder的操作是安全的，
虽然他的速度最快，但是可以保证StringBuffer是可以正确操作的。
当然大多数情况下就是我们是在单线程下(同一个线程分支中进行)进行的操作，
所以大多数情况下是建议用StringBuilder而不用StringBuffer的，就是速度的原因。

对于三者使用的总结：
1.如果要操作少量的数据用 = String
2.单线程操作字符串缓冲区 下操作大量数据 = StringBuilder

3.多线程操作字符串缓冲区 下操作大量数据 = StringBuffer


线程安全：
多个线程访问同一个对象时，如果不用考虑这些线程在运行时环境下的调度和交替执行，也不需要进行额外的同步，
或者在调用方进行任何其他操作，调用这个对象的行为都可以获得正确的结果，那么这个对象就是线程安全的。